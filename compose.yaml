services:
  app:
    image: app:0.0.1
    container_name: later-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
  db: # имя сервиса
    # образ, из которого должен быть запущен контейнер
    image: postgres:16.1
    # имя, которое нужно присвоить контейнеру
    container_name: later-db
    # публикуемые порты
    ports:
      - "5432:5432"
    # настройки монтирования volume
    volumes:
      - ./db:/var/lib/postgresql/data/
    # переменные окружения
    environment:
      - POSTGRES_DB=later
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    # описание способа проверки, что контейнер в рабочем состоянии
    healthcheck:
      # указываем, какую команду выполнить внутри контейнера для проверки его статуса
      # в этом примере вызывается утилита pg_isready, входящая в состав PostgreSQL
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      # через какое время после запуска начинать проверку
      timeout: 5s
      # интервал повторов проверки
      interval: 5s
      # количество попыток
      retries: 10
  db-init:
    image: postgres:16.1
    container_name: db-init
    depends_on:
      db:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://dbuser:12345@db:5432/later -v ON_ERROR_STOP=1 <<-EOSQL
          CREATE TABLE IF NOT EXISTS users (
          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          email varchar(320),
          first_name varchar(100),
          last_name varchar(100),
          registration_date TIMESTAMP,
          state varchar(50)
        );
        
        CREATE TABLE IF NOT EXISTS items (
          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          user_id BIGINT,
          url VARCHAR(1000),
          CONSTRAINT fk_items_to_users FOREIGN KEY(user_id) REFERENCES users(id),
          UNIQUE(id, url)
        );
        
        CREATE TABLE IF NOT EXISTS tags (
          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          item_id BIGINT,
          name VARCHAR(50),
          CONSTRAINT fk_tags_to_items FOREIGN KEY(item_id) REFERENCES items(id)
        );
        EOSQL